sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]
sourceSets.main.resources.srcDirs = ["../core/assets"]

project.ext.mainClassName = "com.github.mittyrobotics.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets")

task run(dependsOn: classes, type: JavaExec) {
    main project.mainClassName
    classpath sourceSets.main.runtimeClasspath
    standardInput System.in
    workingDir project.assetsDir
    ignoreExitValue true
}

task debug(dependsOn: classes, type: JavaExec) {
    main project.mainClassName
    classpath sourceSets.main.runtimeClasspath
    standardInput System.in
    workingDir project.assetsDir
    ignoreExitValue true
    debug true
}

jar {
// sets the name of the .jar file this produces to the name of the game or app.
    archiveBaseName.set(appName)
// the duplicatesStrategy matters starting in Gradle 7.0; this setting works.
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    dependsOn configurations.runtimeClasspath
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
// these "exclude" lines remove some unnecessary duplicate files in the output JAR.
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
    dependencies {
        exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
    }
// setting the manifest makes the JAR runnable.
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
// this last step may help on some OSes that need extra instruction to make runnable JARs.
    doLast {
        file(archiveFile).setExecutable(true, false)
    }
}

// Equivalent to the jar task; here for compatibility with gdx-setup.
task dist(dependsOn: [jar]) {
}


dist.dependsOn classes

eclipse.project.name = appName + "-desktop"
